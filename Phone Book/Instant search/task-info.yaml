type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/Sort.java
  visible: true
  text: |
    package phonebook;

    import java.util.ArrayList;
    import java.util.Collections;

    import static phonebook.Search.removeDigits;

    public class Sort {

        public static ArrayList<Object> bubbleSort(ArrayList<String> phonebook, long timeLimit) {
            ArrayList<Object> returnValues = new ArrayList<>(phonebook.size());
            long startTime = System.currentTimeMillis();
            boolean isSorted = true;
            do {
                for (int i = 0; i < phonebook.size() - 1; i++) {
                    if (System.currentTimeMillis() - startTime > timeLimit) {
                        returnValues.add(phonebook);
                        returnValues.add(false);
                        return returnValues;
                    }
                    String entry1 = phonebook.get(i);
                    String person1 = removeDigits(entry1);
                    String entry2 = phonebook.get(i+1);
                    String person2 = removeDigits(entry2);
                    if (person1.compareTo(person2) > 0) {
                        String temp = entry1;
                        phonebook.set(i, entry2);
                        phonebook.set(i+1, entry1);
                        isSorted = false;
                    }
                }
            } while (!isSorted);

            returnValues.add(phonebook);
            returnValues.add(true);
            return returnValues;
        }

        public static ArrayList<String> quickSort(ArrayList<String> phonebook) {
            ArrayList<String> rsl = new ArrayList<>(phonebook.size());
            if (phonebook.size() <= 1) return phonebook;
            if (phonebook.size() == 2 && removeDigits(phonebook.get(0)).compareTo(removeDigits(phonebook.get(1))) <= 0) return phonebook;
            String pivot = phonebook.get(0);
            ArrayList<String> left = new ArrayList<>();
            ArrayList<String> right = new ArrayList<>();
            for (int i = 1; i < phonebook.size(); i++) {
                String checked = phonebook.get(i);
                if (removeDigits(checked).compareTo(removeDigits(pivot)) <= 0) {
                    left.add(checked);
                } else {
                    right.add(checked);
                }
            }
            rsl.addAll(quickSort(left));
            rsl.add(pivot);
            rsl.addAll(quickSort(right));
            return rsl;
        }

    }
  learner_created: true
- name: src/phonebook/Hashtable.java
  visible: true
  text: "package phonebook;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\
    \npublic class Hashtable {\n\n    private LinkedList<String>[] hashtable;\n  \
    \  private int capacity;\n\n    public Hashtable(int capacity) {\n        this.hashtable\
    \ = new LinkedList[capacity];\n        this.capacity = capacity;\n    }\n\n  \
    \  public void add(String item) {\n        int index = item.hashCode() % capacity;\n\
    \        this.hashtable[index].add(item);\n    }\n    \n    public boolean contains(String\
    \ item) {\n        int index = item.hashCode() % capacity;\n        List<String>\
    \ bucket = this.hashtable[index];\n        if (bucket.size() == 0) return false;\n\
    \        else return bucket.contains(item);\n    }\n\n}\n"
  learner_created: true
- name: src/phonebook/Search.java
  visible: true
  text: |
    package phonebook;

    import java.util.ArrayList;

    public class Search {

        public static long linearSearch (ArrayList<String> phonebook, String name) {
            long index = -1;
            for (int i = 0; i < phonebook.size(); i++) {
                String entry = phonebook.get(i);
                String person = removeDigits(entry);
                if (name.equals(person)) {
                    index = i;
                    break;
                }
            }
            return index;
        }

        public static long binarySearch (ArrayList<String> phonebook, String name, int left, int right) {
          //  System.out.print("looking for " + name + " between " + removeDigits(phonebook.get(left)) + " and " + removeDigits(phonebook.get(right)));
          //  System.out.println(". Mid value = " + removeDigits(phonebook.get((left + right) / 2)));
            if (name.compareTo(removeDigits(phonebook.get(left))) < 0) return -1;
            if (name.compareTo(removeDigits(phonebook.get(right))) > 0) return -1;
            if (left == right) return name.equals(removeDigits(phonebook.get(left))) ? left : -1;
            if (right - left == 1) {
                if (name.equals(removeDigits(phonebook.get(left)))) {
                    return left;
                } else if (name.equals(removeDigits(phonebook.get(right)))) {
                    return right;
                } else return -1;
            }

            int mid = (left + right) / 2;
            String value = removeDigits(phonebook.get(mid));
            int order = name.compareTo(value);
            if (order == 0) {
                return mid;
            }
            int nextLeft = order < 0 ? left : mid + 1;
            int nextRight = order < 0 ? mid - 1  : right;
            return binarySearch(phonebook, name, nextLeft, nextRight);
        }

        public static long jumpSearch (ArrayList<String> phonebook, String name) {
            long length = phonebook.size();
            int block = (int) Math.sqrt(length);
            int jump = (int) Math.ceil((double) length / block);
            for (int i = 0; i < phonebook.size(); i += jump) {
                String entry = phonebook.get(i);
                String person = removeDigits(entry);
                if (name.equals(person)) return i;
                else if (name.compareTo(person) < 0) {
                    if (i == 0) return -1;
                    for (int j = 1; j < block; j++) {
                        entry = phonebook.get(i - j);
                        person = removeDigits(entry);
                        if (name.equals(person)) {
                            return i - j;
                        }
                    }
                }
            }
            return -1;
        }

        public static String removeDigits(String str) {
            String result = "";
            for (int i = 0; i < str.length(); i++) {
                if (!Character.isDigit(str.charAt(i))) {
                    result = result + str.charAt(i);
                }
            }
            return result.trim();
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 20 Jan 2022 22:33:21 UTC
record: -1
